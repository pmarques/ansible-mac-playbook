---
- name: Configure MacOS
  hosts: mac
  gather_facts: false
  tasks:
  - ansible.builtin.import_tasks: tasks/always.yaml
    tags: always
    when: "'personal' in group_names"

  - name: Add taps to Homebrew
    community.general.homebrew_tap:
      name: "{{ item }}"
    when: false
    with_items: "{{ brew_taps }}"
    tags:
    - brew

- name: Configure Mac OS X, install Dev & Ops tools
  hosts: mac
  gather_facts: false
  handlers:
  # Apply Dock settings
  - name: Reload OS X Dock
    ansible.builtin.command: launchctl stop com.apple.Dock.agent

  - name: Reload Finder
    ansible.builtin.command: killall Finder

  tasks:
  - name: Update homebrew and upgrade all packages
    community.general.homebrew:
      update_homebrew: true
      upgrade_all: true
    tags:
    - brew

  - name: Configure static hosts
    become: true
    ansible.builtin.lineinfile:
      path: /etc/hosts
      regexp: ^{{ item | regex_escape() }}$
      line: "{{ item }}"
    with_items: "{{ static_hosts }}"
    tags:
    - hosts

  - name: Install tools
    community.general.homebrew:
      name: "{{ brew_packages }}"
      state: "{{ pkg_state }}"
      update_homebrew: true
    tags:
    - brew

  - name: Install nice applications
    community.general.homebrew_cask:
      name: "{{ brew_cask_packages }}"
      state: "{{ pkg_state }}"
      update_homebrew: true
    tags:
    - brew
    - cask

  - name: Remove old brew packages
    community.general.homebrew:
      name: "{{ brew_cleanup_packages }}"
      state: absent
    tags:
    - cleanup

  - name: Homebrew cleanup
    ansible.builtin.command: brew cleanup
    register: brew_cleanup
    changed_when: brew_cleanup.stdout_lines | length > 0
    tags:
    - brew
    - cleanup

  - name: Install pip modules
    ansible.builtin.pip:
      name: "{{ pip_packages }}"
      state: "{{ pkg_state }}"
    tags:
    - pip
    - python

  # TODO: this is not working, is not installing binaries o0
  - name: Install Ruby modules
    community.general.gem:
      name: "{{ item }}"
      state: "{{ pkg_state }}"
    with_items: "{{ gem_packages }}"
    tags:
    - gems
    - ruby

  - ansible.builtin.import_tasks: tasks/mac_preferences.yaml
    tags:
    - osx
    - preferences

  - ansible.builtin.import_tasks: tasks/gcloud.yaml
    tags:
    - gcloud

  - name: Get VSCode extensions
    ansible.builtin.command: code --list-extensions
    changed_when: false
    check_mode: false
    register: vscode_installed_extensions
    tags:
    - vscode

  # TODO: this is not working, is not installing binaries o0
  - name: Install VSCode extensions
    ansible.builtin.command: code --install-extension {{ item }}
    with_items: "{{ vscode_packages }}"
    when: item not in vscode_installed_extensions.stdout_lines
    tags:
    - vscode

# vi:ft=ansible
